#sudo installatios:
sudo apt update -y && sudo apt upgrade -y
sudo apt install -y git curl unzip vim wget software-properties-common

#Terraform 
sudo apt install -y gnupg software-properties-common
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt update && sudo apt install -y terraform
terraform -v

#install AWS CLI
sudo apt install -y unzip
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version

#congigure
aws configure

#cloning
cd ~
git clone https://github.com/akshu20791/addressbook-ci-cd-project.git
cd addressbook-ci-cd-project
git remote remove origin
git remote add origin https://github.com/Waseem7839/addressbook-ci-cd.git
git branch -M main
git push -u origin main

#create terraform
mkdir terraform && cd terraform

#provider.tf
provider "aws" {
  region = "eu-west-2"
}

data "aws_ami" "ubuntu_2204" {
  most_recent = true
  owners      = ["099720109477"]
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
}

#variables.tf
variable "key_name"      { default = "sk_3" }
variable "instance_type" { default = "t2.micro" }

#security_groups.tf
resource "aws_security_group" "cicd_sg" {
  name        = "cicd-sg"
  description = "Allow SSH, Jenkins, Tomcat"

  ingress { from_port = 22   to_port = 22   protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] }
  ingress { from_port = 8080 to_port = 8080 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] }
  ingress { from_port = 9000 to_port = 9000 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] }

  egress { from_port = 0 to_port = 0 protocol = "-1" cidr_blocks = ["0.0.0.0/0"] }
}

#main.tf
resource "aws_instance" "jenkins_master" {
  ami                    = data.aws_ami.ubuntu_2204.id
  instance_type          = var.instance_type
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.cicd_sg.id]
  tags = { Name = "Jenkins-Master" }
}

resource "aws_instance" "app_node" {
  ami                    = data.aws_ami.ubuntu_2204.id
  instance_type          = var.instance_type
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.cicd_sg.id]
  tags = { Name = "Application-Node" }
}

#outputs.tf
output "jenkins_public_ip" {
  value = aws_instance.jenkins_master.public_ip
}

output "app_public_ip" {
  value = aws_instance.app_node.public_ip
}

#Run commands
terraform init
terraform apply -auto-approve

#Install Jenkins, Maven & Ansible
ssh -i sk_3.pem ubuntu@<JENKINS_PUBLIC_IP>

#Install Java, Maven, Git & Ansible
sudo apt update -y
sudo apt install -y openjdk-17-jdk maven git ansible

#Install jenkins
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc >/dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | \
sudo tee /etc/apt/sources.list.d/jenkins.list >/dev/null

sudo apt update -y
sudo apt install -y jenkins
sudo systemctl enable --now jenkins

#Get password
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

#Configure Ansible for Tomcat Deployment
cd ~/addressbook-ci-cd-project
mkdir ansible && cd ansible

#hosts
vim hosts

#paste
[app]
<APP_PUBLIC_IP> ansible_user=ubuntu

#tomcat-deploy.yml
vim tomcat-deploy.yml

#paste
- name: Install Tomcat & Deploy WAR
  hosts: app
  become: yes
  tasks:
    - name: Install Java & Tomcat
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - openjdk-17-jre
        - tomcat9
        - tomcat9-admin

    - name: Deploy WAR
      copy:
        src: target/addressbook.war
        dest: /var/lib/tomcat9/webapps/addressbook.war
        mode: '0644'

    - name: Restart Tomcat
      systemd:
        name: tomcat9
        state: restarted
        enabled: yes

#Create Jenkinsfile
cd ~/addressbook-ci-cd-project
vim Jenkinsfile

#paste above
pipeline {
  agent any
  environment {
    APP_HOST = "<APP_PUBLIC_IP>"
    SSH_CRED = "aws-key"
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/Waseem7839/addressbook-ci-cd.git'
      }
    }
    stage('Build with Maven') {
      steps {
        sh 'mvn -B clean package'
      }
    }
    stage('Deploy to Tomcat') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: SSH_CRED, keyFileVariable: 'SSH_KEY')]) {
          sh '''
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ansible/hosts \
              --private-key "$SSH_KEY" \
              ansible/tomcat-deploy.yml
          '''
        }
      }
    }
  }
}


